// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/couple_db.dart';
import 'data/models/event_db.dart';
import 'domain/models/note/note.dart';
import 'domain/models/note_file/note_file.dart';
import 'domain/models/reminder/reminder.dart';
import 'domain/models/schedule_subject/schedule_subject.dart';
import 'domain/models/week_number/week_number.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 5480714166435319607),
      name: 'CoupleDB',
      lastPropertyId: const obx_int.IdUid(15, 7162566815983338014),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6784161525306467972),
            name: 'id',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(17, 2495349900386157572)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4275684804891642941),
            name: 'audiences',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4940579546972549732),
            name: 'discipline',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7949174116230514789),
            name: 'lecturers',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8995788885646466761),
            name: 'dbType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4619454666610628437),
            name: 'dbID',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8032764197093917468),
            name: 'weekNumberId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(18, 6635593387169871357),
            relationTarget: 'WeekNumber'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7084371980963503049),
            name: 'scheduleSubjectId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(19, 8790847901885616306),
            relationTarget: 'ScheduleSubject'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1881166868951300963),
            name: 'dateTimeEnd',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7162566815983338014),
            name: 'dateTimeStart',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 5408297173790329811),
      name: 'EventDB',
      lastPropertyId: const obx_int.IdUid(11, 1630913774793036337),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 994092958168848233),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1500936715972334083),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8506989828847087467),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2140713880612862238),
            name: 'weekNum',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1668606529899355858),
            name: 'location',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6927335239875420421),
            name: 'dateTimeEnd',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5124352015699425989),
            name: 'dateTimeStart',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1630913774793036337),
            name: 'userUID',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 5901542307825576892),
            name: 'reminders',
            targetId: const obx_int.IdUid(18, 723268708847700747))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 735719639961690522),
      name: 'Note',
      lastPropertyId: const obx_int.IdUid(10, 2170643725672088205),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3057419167839562730),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6181180344952142219),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8343189923104370040),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4414436526303478413),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 572991563788016919),
            name: 'userUID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 543216453361891142),
            name: 'coupleID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2170643725672088205),
            name: 'scheduleSubjectID',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 7580521061366540174),
            name: 'reminders',
            targetId: const obx_int.IdUid(18, 723268708847700747))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'attachedFiles', srcEntity: 'NoteFile', srcField: 'note')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 6581195835741669404),
      name: 'NoteFile',
      lastPropertyId: const obx_int.IdUid(7, 8436684183961678458),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7079046791683737382),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 928716017269495514),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2892024408225256198),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4148322711258658747),
            name: 'noteId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(15, 564889761863671504),
            relationTarget: 'Note'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7979301773689421163),
            name: 'dbType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8436684183961678458),
            name: 'identifier',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 723268708847700747),
      name: 'Reminder',
      lastPropertyId: const obx_int.IdUid(8, 5819539001547067082),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2444250456273189574),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5819539001547067082),
            name: 'minutesBefore',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(19, 234295889408471229),
      name: 'WeekNumber',
      lastPropertyId: const obx_int.IdUid(5, 3003941807877410036),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6272107406252233869),
            name: 'calendarWeekNumber',
            type: 6,
            flags: 32808,
            indexId: const obx_int.IdUid(21, 4695460110029072893)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2430353312985409425),
            name: 'studyWeekNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4541798334966378603),
            name: 'weekStartDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3003941807877410036),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(20, 3099322797470029057),
      name: 'ScheduleSubject',
      lastPropertyId: const obx_int.IdUid(6, 8237943669115334800),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6336450095146088235),
            name: 'dbId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3305295637089628413),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4718598178371331462),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 37936580739695124),
            name: 'isChosen',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 746086890089964310),
            name: 'isVPK',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8237943669115334800),
            name: 'userUID',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(20, 3099322797470029057),
      lastIndexId: const obx_int.IdUid(23, 6955382620716974349),
      lastRelationId: const obx_int.IdUid(3, 7580521061366540174),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        1910578607431801677,
        6564081225644799157,
        701607334596766764,
        3955847375317494942,
        6365253965074262032,
        2803109517062443162,
        2107067233892169345,
        914042337563340598,
        2460264848318751972,
        3529840884396796264,
        8637567801753414186,
        1447675370798152411,
        2407632993041309587
      ],
      retiredIndexUids: const [
        1606607200252430453,
        6702232084178333351,
        5695844585636368914,
        7434552496165741410,
        905497168917521630,
        6390834597951895379,
        6955382620716974349
      ],
      retiredPropertyUids: const [
        8531280715951716256,
        5343336231592800032,
        4041494958170106113,
        8705310470934911829,
        6357635646213294641,
        493050093322022615,
        5795760961840172971,
        1168014137087986006,
        5856057666645421310,
        16813341898936457,
        6836084117422674255,
        5499231742823135521,
        5206147708866401738,
        5792695101486551096,
        962648145084222784,
        3458241965252757428,
        960069697671965780,
        2016668046429502095,
        1724291030451517162,
        8958418185775935014,
        2648183407103052794,
        8448514585900121930,
        4342852172978207443,
        2495668294353778742,
        4364730252489929958,
        526765531046512864,
        3198016435380073846,
        2687273874596452908,
        1002905684170273399,
        4946166731877366772,
        665913462344297158,
        6983693999060459476,
        8905720686228930495,
        1757377980583035597,
        2414596226964128475,
        7964189422232866656,
        8524115835594038515,
        8586891483261331178,
        3981874277290770469,
        4529835760660775438,
        2279409324267548940,
        4369471774678984486,
        7793930249452873794,
        3785246543164776287,
        7873484480009240251,
        8606615907388497622,
        5169322805903344335,
        7804159640948060540,
        6363031504345999642,
        965904485105953696,
        7463470035368337709,
        5608958517753912348,
        3493144564660923167,
        5619886490530783704,
        2271529022776843605,
        5685450538537441623,
        7137908083769626596,
        1169753542374110735,
        3183900514941058989,
        3536761177846029287,
        2055389319938891387,
        5340708925378251933,
        9163641180261437739,
        328405976758079175,
        5630191814713138280,
        605446746748711282,
        1760040761526889768,
        4075190789421474376,
        8692498959326071911,
        970962328811868607
      ],
      retiredRelationUids: const [7624436913426914363],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CoupleDB: obx_int.EntityDefinition<CoupleDB>(
        model: _entities[0],
        toOneRelations: (CoupleDB object) =>
            [object.weekNumber, object.scheduleSubject],
        toManyRelations: (CoupleDB object) => {},
        getId: (CoupleDB object) => object.dbID,
        setId: (CoupleDB object, int id) {
          object.dbID = id;
        },
        objectToFB: (CoupleDB object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final audiencesOffset = fbb.writeString(object.audiences);
          final disciplineOffset = fbb.writeString(object.discipline);
          final lecturersOffset = fbb.writeString(object.lecturers);
          final dbTypeOffset =
              object.dbType == null ? null : fbb.writeString(object.dbType!);
          fbb.startTable(16);
          fbb.addOffset(0, idOffset);
          fbb.addOffset(1, audiencesOffset);
          fbb.addOffset(2, disciplineOffset);
          fbb.addOffset(3, lecturersOffset);
          fbb.addOffset(5, dbTypeOffset);
          fbb.addInt64(8, object.dbID);
          fbb.addInt64(9, object.weekNumber.targetId);
          fbb.addInt64(10, object.scheduleSubject.targetId);
          fbb.addInt64(11, object.dateTimeEnd.millisecondsSinceEpoch);
          fbb.addInt64(14, object.dateTimeStart.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.dbID;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 4, '');
          final audiencesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final disciplineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lecturersParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final dateTimeEndParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0));
          final dateTimeStartParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          final object = CoupleDB(
              id: idParam,
              audiences: audiencesParam,
              discipline: disciplineParam,
              lecturers: lecturersParam,
              dateTimeEnd: dateTimeEndParam,
              dateTimeStart: dateTimeStartParam)
            ..dbType = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..dbID =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.weekNumber.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.weekNumber.attach(store);
          object.scheduleSubject.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.scheduleSubject.attach(store);
          return object;
        }),
    EventDB: obx_int.EntityDefinition<EventDB>(
        model: _entities[1],
        toOneRelations: (EventDB object) => [],
        toManyRelations: (EventDB object) =>
            {obx_int.RelInfo<EventDB>.toMany(2, object.id): object.reminders},
        getId: (EventDB object) => object.id,
        setId: (EventDB object, int id) {
          object.id = id;
        },
        objectToFB: (EventDB object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final userUIDOffset = fbb.writeString(object.userUID);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(6, object.weekNum);
          fbb.addOffset(7, locationOffset);
          fbb.addInt64(8, object.dateTimeEnd.millisecondsSinceEpoch);
          fbb.addInt64(9, object.dateTimeStart.millisecondsSinceEpoch);
          fbb.addOffset(10, userUIDOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateTimeStartParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final dateTimeEndParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final weekNumParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final userUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final object = EventDB(
              id: idParam,
              title: titleParam,
              dateTimeStart: dateTimeStartParam,
              dateTimeEnd: dateTimeEndParam,
              weekNum: weekNumParam,
              userUID: userUIDParam,
              location: locationParam,
              description: descriptionParam);
          obx_int.InternalToManyAccess.setRelInfo<EventDB>(object.reminders,
              store, obx_int.RelInfo<EventDB>.toMany(2, object.id));
          return object;
        }),
    Note: obx_int.EntityDefinition<Note>(
        model: _entities[2],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {
              obx_int.RelInfo<Note>.toMany(3, object.id): object.reminders,
              obx_int.RelInfo<NoteFile>.toOneBacklink(
                      5, object.id, (NoteFile srcObject) => srcObject.note):
                  object.attachedFiles
            },
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final userUIDOffset = fbb.writeString(object.userUID);
          final coupleIDOffset = fbb.writeString(object.coupleID);
          final scheduleSubjectIDOffset =
              fbb.writeString(object.scheduleSubjectID);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, titleOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, userUIDOffset);
          fbb.addOffset(8, coupleIDOffset);
          fbb.addOffset(9, scheduleSubjectIDOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final userUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final coupleIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final scheduleSubjectIDParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final object = Note(
              title: titleParam,
              id: idParam,
              date: dateParam,
              userUID: userUIDParam,
              coupleID: coupleIDParam,
              scheduleSubjectID: scheduleSubjectIDParam,
              description: descriptionParam);
          obx_int.InternalToManyAccess.setRelInfo<Note>(object.reminders, store,
              obx_int.RelInfo<Note>.toMany(3, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Note>(
              object.attachedFiles,
              store,
              obx_int.RelInfo<NoteFile>.toOneBacklink(
                  5, object.id, (NoteFile srcObject) => srcObject.note));
          return object;
        }),
    NoteFile: obx_int.EntityDefinition<NoteFile>(
        model: _entities[3],
        toOneRelations: (NoteFile object) => [object.note],
        toManyRelations: (NoteFile object) => {},
        getId: (NoteFile object) => object.id,
        setId: (NoteFile object, int id) {
          object.id = id;
        },
        objectToFB: (NoteFile object, fb.Builder fbb) {
          final pathOffset = fbb.writeString(object.path);
          final nameOffset = fbb.writeString(object.name);
          final identifierOffset = fbb.writeString(object.identifier);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, pathOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.note.targetId);
          fbb.addInt64(5, object.dbType);
          fbb.addOffset(6, identifierOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final identifierParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = NoteFile(
              path: pathParam, name: nameParam, identifier: identifierParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbType = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);
          object.note.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.note.attach(store);
          return object;
        }),
    Reminder: obx_int.EntityDefinition<Reminder>(
        model: _entities[4],
        toOneRelations: (Reminder object) => [],
        toManyRelations: (Reminder object) => {},
        getId: (Reminder object) => object.id,
        setId: (Reminder object, int id) {
          object.id = id;
        },
        objectToFB: (Reminder object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(7, object.minutesBefore);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final minutesBeforeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = Reminder(minutesBefore: minutesBeforeParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    WeekNumber: obx_int.EntityDefinition<WeekNumber>(
        model: _entities[5],
        toOneRelations: (WeekNumber object) => [],
        toManyRelations: (WeekNumber object) => {},
        getId: (WeekNumber object) => object.id,
        setId: (WeekNumber object, int id) {
          object.id = id;
        },
        objectToFB: (WeekNumber object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(1, object.calendarWeekNumber);
          fbb.addInt64(2, object.studyWeekNumber);
          fbb.addInt64(3, object.weekStartDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final calendarWeekNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final weekStartDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final studyWeekNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = WeekNumber(
              calendarWeekNumber: calendarWeekNumberParam,
              weekStartDate: weekStartDateParam,
              studyWeekNumber: studyWeekNumberParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);

          return object;
        }),
    ScheduleSubject: obx_int.EntityDefinition<ScheduleSubject>(
        model: _entities[6],
        toOneRelations: (ScheduleSubject object) => [],
        toManyRelations: (ScheduleSubject object) => {},
        getId: (ScheduleSubject object) => object.dbId,
        setId: (ScheduleSubject object, int id) {
          object.dbId = id;
        },
        objectToFB: (ScheduleSubject object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final userUIDOffset = fbb.writeString(object.userUID);
          fbb.startTable(7);
          fbb.addInt64(0, object.dbId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.isChosen);
          fbb.addBool(4, object.isVPK);
          fbb.addOffset(5, userUIDOffset);
          fbb.finish(fbb.endTable());
          return object.dbId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dbIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final isChosenParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final userUIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final isVPKParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = ScheduleSubject(
              dbId: dbIdParam,
              id: idParam,
              name: nameParam,
              isChosen: isChosenParam,
              userUID: userUIDParam,
              isVPK: isVPKParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CoupleDB] entity fields to define ObjectBox queries.
class CoupleDB_ {
  /// see [CoupleDB.id]
  static final id =
      obx.QueryStringProperty<CoupleDB>(_entities[0].properties[0]);

  /// see [CoupleDB.audiences]
  static final audiences =
      obx.QueryStringProperty<CoupleDB>(_entities[0].properties[1]);

  /// see [CoupleDB.discipline]
  static final discipline =
      obx.QueryStringProperty<CoupleDB>(_entities[0].properties[2]);

  /// see [CoupleDB.lecturers]
  static final lecturers =
      obx.QueryStringProperty<CoupleDB>(_entities[0].properties[3]);

  /// see [CoupleDB.dbType]
  static final dbType =
      obx.QueryStringProperty<CoupleDB>(_entities[0].properties[4]);

  /// see [CoupleDB.dbID]
  static final dbID =
      obx.QueryIntegerProperty<CoupleDB>(_entities[0].properties[5]);

  /// see [CoupleDB.weekNumber]
  static final weekNumber =
      obx.QueryRelationToOne<CoupleDB, WeekNumber>(_entities[0].properties[6]);

  /// see [CoupleDB.scheduleSubject]
  static final scheduleSubject =
      obx.QueryRelationToOne<CoupleDB, ScheduleSubject>(
          _entities[0].properties[7]);

  /// see [CoupleDB.dateTimeEnd]
  static final dateTimeEnd =
      obx.QueryDateProperty<CoupleDB>(_entities[0].properties[8]);

  /// see [CoupleDB.dateTimeStart]
  static final dateTimeStart =
      obx.QueryDateProperty<CoupleDB>(_entities[0].properties[9]);
}

/// [EventDB] entity fields to define ObjectBox queries.
class EventDB_ {
  /// see [EventDB.id]
  static final id =
      obx.QueryIntegerProperty<EventDB>(_entities[1].properties[0]);

  /// see [EventDB.title]
  static final title =
      obx.QueryStringProperty<EventDB>(_entities[1].properties[1]);

  /// see [EventDB.description]
  static final description =
      obx.QueryStringProperty<EventDB>(_entities[1].properties[2]);

  /// see [EventDB.weekNum]
  static final weekNum =
      obx.QueryIntegerProperty<EventDB>(_entities[1].properties[3]);

  /// see [EventDB.location]
  static final location =
      obx.QueryStringProperty<EventDB>(_entities[1].properties[4]);

  /// see [EventDB.dateTimeEnd]
  static final dateTimeEnd =
      obx.QueryDateProperty<EventDB>(_entities[1].properties[5]);

  /// see [EventDB.dateTimeStart]
  static final dateTimeStart =
      obx.QueryDateProperty<EventDB>(_entities[1].properties[6]);

  /// see [EventDB.userUID]
  static final userUID =
      obx.QueryStringProperty<EventDB>(_entities[1].properties[7]);

  /// see [EventDB.reminders]
  static final reminders =
      obx.QueryRelationToMany<EventDB, Reminder>(_entities[1].relations[0]);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = obx.QueryIntegerProperty<Note>(_entities[2].properties[0]);

  /// see [Note.date]
  static final date = obx.QueryDateProperty<Note>(_entities[2].properties[1]);

  /// see [Note.title]
  static final title =
      obx.QueryStringProperty<Note>(_entities[2].properties[2]);

  /// see [Note.description]
  static final description =
      obx.QueryStringProperty<Note>(_entities[2].properties[3]);

  /// see [Note.userUID]
  static final userUID =
      obx.QueryStringProperty<Note>(_entities[2].properties[4]);

  /// see [Note.coupleID]
  static final coupleID =
      obx.QueryStringProperty<Note>(_entities[2].properties[5]);

  /// see [Note.scheduleSubjectID]
  static final scheduleSubjectID =
      obx.QueryStringProperty<Note>(_entities[2].properties[6]);

  /// see [Note.reminders]
  static final reminders =
      obx.QueryRelationToMany<Note, Reminder>(_entities[2].relations[0]);

  /// see [Note.attachedFiles]
  static final attachedFiles =
      obx.QueryBacklinkToMany<NoteFile, Note>(NoteFile_.note);
}

/// [NoteFile] entity fields to define ObjectBox queries.
class NoteFile_ {
  /// see [NoteFile.id]
  static final id =
      obx.QueryIntegerProperty<NoteFile>(_entities[3].properties[0]);

  /// see [NoteFile.path]
  static final path =
      obx.QueryStringProperty<NoteFile>(_entities[3].properties[1]);

  /// see [NoteFile.name]
  static final name =
      obx.QueryStringProperty<NoteFile>(_entities[3].properties[2]);

  /// see [NoteFile.note]
  static final note =
      obx.QueryRelationToOne<NoteFile, Note>(_entities[3].properties[3]);

  /// see [NoteFile.dbType]
  static final dbType =
      obx.QueryIntegerProperty<NoteFile>(_entities[3].properties[4]);

  /// see [NoteFile.identifier]
  static final identifier =
      obx.QueryStringProperty<NoteFile>(_entities[3].properties[5]);
}

/// [Reminder] entity fields to define ObjectBox queries.
class Reminder_ {
  /// see [Reminder.id]
  static final id =
      obx.QueryIntegerProperty<Reminder>(_entities[4].properties[0]);

  /// see [Reminder.minutesBefore]
  static final minutesBefore =
      obx.QueryIntegerProperty<Reminder>(_entities[4].properties[1]);
}

/// [WeekNumber] entity fields to define ObjectBox queries.
class WeekNumber_ {
  /// see [WeekNumber.calendarWeekNumber]
  static final calendarWeekNumber =
      obx.QueryIntegerProperty<WeekNumber>(_entities[5].properties[0]);

  /// see [WeekNumber.studyWeekNumber]
  static final studyWeekNumber =
      obx.QueryIntegerProperty<WeekNumber>(_entities[5].properties[1]);

  /// see [WeekNumber.weekStartDate]
  static final weekStartDate =
      obx.QueryDateProperty<WeekNumber>(_entities[5].properties[2]);

  /// see [WeekNumber.id]
  static final id =
      obx.QueryIntegerProperty<WeekNumber>(_entities[5].properties[3]);
}

/// [ScheduleSubject] entity fields to define ObjectBox queries.
class ScheduleSubject_ {
  /// see [ScheduleSubject.dbId]
  static final dbId =
      obx.QueryIntegerProperty<ScheduleSubject>(_entities[6].properties[0]);

  /// see [ScheduleSubject.id]
  static final id =
      obx.QueryStringProperty<ScheduleSubject>(_entities[6].properties[1]);

  /// see [ScheduleSubject.name]
  static final name =
      obx.QueryStringProperty<ScheduleSubject>(_entities[6].properties[2]);

  /// see [ScheduleSubject.isChosen]
  static final isChosen =
      obx.QueryBooleanProperty<ScheduleSubject>(_entities[6].properties[3]);

  /// see [ScheduleSubject.isVPK]
  static final isVPK =
      obx.QueryBooleanProperty<ScheduleSubject>(_entities[6].properties[4]);

  /// see [ScheduleSubject.userUID]
  static final userUID =
      obx.QueryStringProperty<ScheduleSubject>(_entities[6].properties[5]);
}
